#!/usr/bin/env bash
#  ____ _____ ___  ____
# |  _ \_   _/ _ \/ ___|   Derek Taylor (DistroTube)
# | | | || || | | \___ \   http://www.youtube.com/c/DistroTube
# | |_| || || |_| |___) |  http://www.gitlab.com/dtos/dtos
# |____/ |_| \___/|____/
#
# NAME: DTOS
# DESC: An installation and deployment script for DT's Qtile desktop.
# WARNING: Run this script at your own risk.
# DEPENDENCIES: libnewt (probably already on the system)

if [ "$(id -u)" = 0 ]; then
    echo "##################################################################"
    echo "This script MUST NOT be run as root user since it makes changes"
    echo "to the \$HOME directory of the \$USER executing this script."
    echo "The \$HOME directory of the root user is, of course, '/root'."
    echo "We don't want to mess around in there. So run this script as a"
    echo "normal user. You will be asked for a sudo password when necessary."
    echo "##################################################################"
    exit 1
fi

bold=$(tput setaf 2 bold)      # makes text bold and sets color to 2
bolderror=$(tput setaf 3 bold) # makes text bold and sets color to 3
normal=$(tput sgr0)            # resets text settings back to normal

error() { \
    printf "%s\n" "${bolderror}ERROR:${normal}\\n%s\\n" "$1" >&2; exit 1;
}

export NEWT_COLORS="
root=,blue
window=,black
shadow=,blue
border=blue,black
title=blue,black
textbox=blue,black
radiolist=black,black
label=black,blue
checkbox=black,blue
compactbutton=black,blue
button=black,red"

printf "%s\n" "## Syncing the repos and installing ${bold}whiptail ${normal}if not installed."
sudo pacman --noconfirm --needed -Syu libnewt || error "Error syncing the repos."

welcome() { \
    whiptail --title "Installing DTOS!" --msgbox "This is a script that will install what I sarcastically call DTOS (DT's operating system).  It's really just an installation script for those that want to try out my tiling window manager configurations and associated programs.  You will be asked to enter your sudo password at various points during this installation, so stay near the computer.\\n\\n-DT (Derek Taylor, aka DistroTube)" 16 60
}

welcome || error "User choose to exit."

speedwarning() { \
    whiptail --title "Installing DTOS!" --yesno "WARNING! The ParallelDownloads option is not enabled in /etc/pacman.conf. This may result in slower installation speeds. Are you sure you want to continue?" 16 60 || error "User choose to exit."
}

distrowarning() { \
    whiptail --title "Installing DTOS!" --msgbox "WARNING! While this script works on all Arch-based distros, some distros choose to package certain things that we also package, which may result in errors when trying to install DTOS packages. If this happens, please look at the package list and remove conflicts manually." 16 60 || error "User choose to exit."
}

grep -qs "#ParallelDownloads" /etc/pacman.conf && speedwarning
grep -qs "ID=arch" /etc/os-release || distrowarning

lastchance() { \
    whiptail --title "Installing DTOS!" --msgbox "WARNING! The DTOS installation script is currently in public beta testing. There are almost certainly errors in it; therefore, it is strongly recommended that you not install this on production machines. It is recommended that you try this out in either a virtual machine or on a test machine." 16 60

    whiptail --title "Are You Sure You Want To Do This?" --yesno "Shall we begin installing DTOS?" 8 60 || { clear; exit 1; }
}

lastchance || error "User choose to exit."

grep "LC_CTYPE" /etc/locale.conf && echo "Checking LC_CYPE in /etc/locale.conf. Variable is already set." || \
    grep "LANG=" /etc/locale.conf | sed 's/LANG=/LC_CTYPE=/g' | sudo tee -a /etc/locale.conf
sudo locale-gen

chaoticaur() {\
    printf "%s\n" "## Installing Chaotic AUR ##"
    printf "%s" "Adding repo " && printf "%s" "${bold}[chaotic-aur] " && printf "%s\n" "${normal}to /etc/pacman.conf."
    sudo pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com && \
        echo "Receiving key for ${bold}chaotic-aur${normal}."
    sudo pacman-key --lsign-key 3056513887B78AEB && \
       echo "Signing key for ${bold}[chaotic-aur]${normal}."
    yes | sudo pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' && \
       echo "Installing keyring for ${bold}[chaotic-aur]${normal}."
    yes | sudo pacman -U 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst' && \
       echo "Installing mirrorlist for ${bold}chaotic-aur${normal}."
}

chaoticaur || error "Error installing Chaotic AUR."

addrepo() { \
    printf "%s\n" "## Adding repositories to /etc/pacman.conf."
    
    # Adding chaotic-aur to pacman.conf
    printf "%s" "Adding repo " && printf "%s" "${bold}[chaotic-aur] " && printf "%s\n" "${normal}to /etc/pacman.conf."
    grep -qxF "[chaotic-aur]" /etc/pacman.conf ||
        ( echo " "; echo "[chaotic-aur]"; \
        echo "Include = /etc/pacman.d/chaotic-mirrorlist") | sudo tee -a /etc/pacman.conf

    # Adding dtos-core-repo to pacman.conf
    printf "%s" "Adding repo " && printf "%s" "${bold}[dtos-core-repo] " && printf "%s\n" "${normal}to /etc/pacman.conf."
    grep -qxF "[dtos-core-repo]" /etc/pacman.conf ||
        ( echo " "; echo "[dtos-core-repo]"; echo "SigLevel = Optional DatabaseOptional"; \
        echo "Server = https://gitlab.com/dtos/\$repo/-/raw/main/\$arch") | sudo tee -a /etc/pacman.conf
}

addrepo || error "Error adding DTOS repo to /etc/pacman.conf."

choosewm() { \
    whiptail --title "INSTALL XMONAD MANAGER" --msgbox "YES OR NO" 16 60
}

installxmonad() { \
    whiptail --title "Window Managers - Xmonad" --yesno "Would you like to install Xmonad?" 8 60
}

choosewm || error "User chose to exit"
installxmonad && sudo pacman -Sy xmonad xmonad-contrib dtos-xmonad xmobar dtos-xmobar polybar dtos-polybar || \
    echo "User chose not to install XMonad"

max() {
    echo -e "$1\n$2" | sort -n | tail -1
}

getbiggestword() {
    echo "$@" | sed "s/ /\n/g" | wc -L
}

replicate() {
    local n="$1"
    local x="$2"
    local str

    for _ in $(seq 1 "$n"); do
        str="$str$x"
    done
    echo "$str"
}

programchoices() {
    choices=()
    local maxlen; maxlen="$(getbiggestword "${!checkboxes[@]}")"
    linesize="$(max "$maxlen" 42)"
    local spacer; spacer="$(replicate "$((linesize - maxlen))" " ")"

    for key in "${!checkboxes[@]}"
    do
        # A portable way to check if a command exists in $PATH and is executable.
        # If it doesn't exist, we set the tick box to OFF.
        # If it exists, then we set the tick box to ON.
        if ! command -v "${checkboxes[$key]}" > /dev/null; then
            # $spacer length is defined in the individual window functions based
            # on the needed length to make the checkbox wide enough to fit window.
            choices+=("${key}" "${spacer}" "OFF")
        else
            choices+=("${key}" "${spacer}" "ON")
        fi
    done
}

selectedprograms() {
    result=$(
        # Creates the whiptail checklist. Also, we use a nifty
        # trick to swap stdout and stderr.
        whiptail --title "$title"                               \
                 --checklist "$text" 22 "$((linesize + 16))" 12 \
                 "${choices[@]}"                                \
                 3>&2 2>&1 1>&3
    )
}

exitorinstall() {
    exitstatus=$?
    # Check the exit status, if 0 we will install the selected
    # packages. A command which exits with zero (0) has succeeded.
    # A non-zero (1-255) exit status indicates failure.
    if [ $exitstatus = 0 ]; then
        # Take the results and remove the "'s and add new lines.
        # Otherwise, pacman is not going to like how we feed it.
        programs=$(echo "$result" | sed 's/" /\n/g' | sed 's/"//g' )
        echo "$programs"
        sudo pacman --needed --ask 4 -Sy "$programs" || \
        echo "Failed to install required packages."
    else
        echo "User selected Cancel."
    fi
}

browsers () {
    title="Web Browsers"
    text="Select one or more web browsers to install.\nAll programs marked with '*' are already installed.\nUnselecting them will NOT uninstall them."
    spacer=$(for i in $(seq 1 38); do echo -n " "; done)

    local -A checkboxes
    checkboxes["brave-bin"]="brave"
    checkboxes["chromium"]="chromium"
    checkboxes["firefox"]="firefox"
    checkboxes["google-chrome"]="google-chrome-stable"
    checkboxes["icecat"]="icecat"
    checkboxes["librewolf"]="librewolf"
    checkboxes["microsoft-edge-stable-bin"]="microsoft-edge-stable"
    checkboxes["mullvad-browser-bin"]="mullvad-browser"
    checkboxes["qutebrowser"]="qutebrowser"
    checkboxes["ungoogled-chromium"]="ungoogled-chromium"
    checkboxes["vivaldi"]="vivaldi"

    programchoices && selectedprograms && exitorinstall
}

otherinternet () {
    title="Other Internet Programs"
    text="Other Internet programs available for installation.\nAll programs marked with '*' are already installed.\nUnselecting them will NOT uninstall them."
    spacer=$(for i in $(seq 1 47); do echo -n " "; done)

    local -A checkboxes
    checkboxes["deluge"]="deluge"
    checkboxes["discord"]="discord"
    checkboxes["element-desktop"]="element-desktop"
    checkboxes["filezilla"]="filezilla"
    checkboxes["geary"]="geary"
    checkboxes["hexchat"]="hexchat"
    checkboxes["jitsi-meet-desktop"]="jitsi-meet-desktop"
    checkboxes["mailspring"]="mailspring"
    checkboxes["telegram-desktop"]="telegram"
    checkboxes["thunderbird"]="thunderbird"
    checkboxes["transmission-gtk"]="transmission-gtk"

    programchoices && selectedprograms && exitorinstall
}

multimedia() {
    title="Multimedia Programs"
    text="Multimedia programs available for installation.\nAll programs marked with '*' are already installed.\nUnselecting them will NOT uninstall them."
    spacer=$(for i in $(seq 1 53); do echo -n " "; done)

    local -A checkboxes
    checkboxes["blender"]="blender"
    checkboxes["deadbeef"]="deadbeef"
    checkboxes["gimp"]="gimp"
    checkboxes["inkscape"]="inkscape"
    checkboxes["kdenlive"]="kdenlive"
    checkboxes["krita"]="krita"
    checkboxes["mpv"]="mpv"
    checkboxes["obs-studio"]="obs"
    checkboxes["rhythmbox"]="rhythmbox"
    checkboxes["ristretto"]="ristretto"
    checkboxes["vlc"]="vlc"

    programchoices && selectedprograms && exitorinstall
}

office() {
    title="Office Programs"
    text="Office and productivity programs available for installation.\nAll programs marked with '*' are already installed.\nUnselecting them will NOT uninstall them."
    spacer=$(for i in $(seq 1 46); do echo -n " "; done)

    local -A checkboxes
    checkboxes["abiword"]="abiword"
    checkboxes["evince"]="evince"
    checkboxes["gnucash"]="gnucash"
    checkboxes["gnumeric"]="gnumeric"
    checkboxes["libreoffice-fresh"]="lowriter"
    checkboxes["libreoffice-still"]="lowriter"
    checkboxes["scribus"]="scribus"
    checkboxes["zathura"]="zathura"

    programchoices && selectedprograms && exitorinstall
}

games () {
    title="Games"
    text="Gaming programs available for installation.\nAll programs marked with '*' are already installed.\nUnselecting them will NOT uninstall them."
    spacer=$(for i in $(seq 1 51); do echo -n " "; done)

    local -A checkboxes
    checkboxes["0ad"]="0ad"
    checkboxes["gnuchess"]="gnuchess"
    checkboxes["lutris"]="lutris"
    checkboxes["neverball"]="neverball"
    checkboxes["openarena"]="openarena"
    checkboxes["steam"]="steam"
    checkboxes["supertuxkart"]="supertuxkart"
    checkboxes["sauerbraten"]="sauerbraten-client"
    checkboxes["teeworlds"]="teeworlds"
    checkboxes["veloren-git"]="veloren"
    checkboxes["wesnoth"]="wesnoth"
    checkboxes["xonotic"]="xonotic-glx"

    programchoices && selectedprograms && exitorinstall
}

browsers
otherinternet
multimedia
office
games

# Let's install each package listed in the pkglist.txt file.
sudo pacman --needed --ask 4 -Sy - < pkglist.txt || error "Failed to install a required package from pkglist.txt."

printf  "%s\n" "## Copying DTOS configuration files from /etc/dtos into \$HOME"

# If these directories or files exist, the DTOS installation will make a backup of them.
[ -d ~/.emacs.d ] && mv ~/.emacs.d ~/.emacs.d.bak."$(date +"%Y%m%d_%H%M%S")"
[ -f ~/.emacs ] && mv ~/.emacs ~/.emacs.bak."$(date +"%Y%m%d_%H%M%S")"
[ -f ~/.bashrc ] && mv ~/.bashrc ~/.bashrc.bak."$(date +"%Y%m%d_%H%M%S")"
[ -f ~/.zshrc ] && mv ~/.zshrc ~/.zshrc.bak."$(date +"%Y%m%d_%H%M%S")"

# Make the /etc/dtos directory if it doesn't exist. 
[ ! -d /etc/dtos ] && sudo mkdir /etc/dtos

# Make the ~/.config directory if it doesn't exist, or backup the ~/.config directory if it does exist. 
[ ! -d ~/.config ] && mkdir ~/.config
[ -d ~/.config ] && mkdir ~/.config-backup-"$(date +%Y.%m.%d-%H%M)" && cp -Rf ~/.config ~/.config-backup-"$(date +%Y.%m.%d-%H%M)"

# Copy all DTOS configs found in /etc/dtos over to the USER's home directory.
cd /etc/dtos && cp -Rf . ~ && cd -

# Change all scripts in .local/bin to be executable.
find "$HOME"/.local/bin -type f -print0 | xargs -0 chmod 775

if [ -d "/etc/dtos/.config/xmonad/" ]; then
    PS3='What bar would you like to use with XMonad? (enter number): '
    bars=("polybar" "xmobar" "both")
    select choice in "${bars[@]}"; do
        case $choice in
             polybar)
                sudo pacman -S dtos-polybar polybar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-polybar.hs "$HOME"/.config/xmonad/xmonad.hs
                break
                ;;
             xmobar)
                sudo pacman -S dtos-xmobar xmobar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-xmobar.hs "$HOME"/.config/xmonad/xmonad.hs
                break
                ;;
             both)
                sudo pacman -S dtos-polybar dtos-xmobar polybar xmobar
                cp /etc/dtos/.config/xmonad/xmonad-example-configs/xmonad-with-polybar.hs "$HOME"/.config/xmonad/xmonad.hs
                break
                ;;
             *)
                echo "Invalid option $REPLY. You must choose a valid option."
                ;;
        esac
    done
fi

[ ! -d /etc/pacman.d/hooks ] && sudo mkdir /etc/pacman.d/hooks
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonad.hook /etc/pacman.d/hooks/
sudo cp /etc/dtos/.config/xmonad/pacman-hooks/recompile-xmonadh.hook /etc/pacman.d/hooks/

[ ! -d "$HOME"/.config/dmscripts ] && mkdir "$HOME"/.config/dmscripts
cp /etc/dmscripts/config "$HOME"/.config/dmscripts/config
sed -i 's/DMBROWSER=\"brave\"/DMBROWSER=\"qutebrowser\"/g' "$HOME"/.config/dmscripts/config
sed -i 's/DMTERM=\"st -e\"/DMTERM=\"alacritty -e\"/g' "$HOME"/.config/dmscripts/config
sed -i 's/setbg_dir=\"${HOME}\/Pictures\/Wallpapers\"/setbg_dir=\"\/usr\/share\/backgrounds\/dtos-backgrounds\"/g' "$HOME"/.config/dmscripts/config

xmonad_recompile() { \
    printf  "%s\n" "## Recompiling XMonad"
    xmonad --recompile
}

xmonad_recompile || echo "Recompiling Xmonad failed!"

xmonadctl_compile() { \
    printf  "%s\n" "## Compiling the xmonadctl script "
    ghc -dynamic "$HOME"/.config/xmonad/xmonadctl.hs
}

xmonadctl_compile || echo "Compiling the xmonadctl script failed!"

PS3='Set default user shell (enter number): '
shells=("fish" "bash" "zsh" "quit")
select choice in "${shells[@]}"; do
    case $choice in
         fish | bash | zsh)
            sudo chsh "$USER" -s "/bin/$choice" && \
            echo -e "$choice has been set as your default USER shell. \
                    \nLogging out is required for this take effect."
            break
            ;;
         quit)
            echo "User quit without changing shell."
            break
            ;;
         *)
            echo "invalid option $REPLY"
            ;;
    esac
done

# Disable the current login manager
sudo systemctl disable "$(grep '/usr/s\?bin' /etc/systemd/system/display-manager.service | awk -F / '{print $NF}')" || echo "Cannot disable current display manager."
# Enable sddm as login manager
sudo systemctl enable sddm
printf "%s\n" "Enabling and configuring ${bold}SDDM ${normal}as the login manager."

## Make multicolor-sddm-theme the default sddm theme ##
# This is the sddm system configuration file.
[ -f "/usr/lib/sddm/sddm.conf.d/default.conf" ] && \
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /usr/lib/sddm/sddm.conf.d/default.conf.backup && \
    sudo sed -i 's/^Current=*.*/Current=/g' /usr/lib/sddm/sddm.conf.d/default.conf

# This is the sddm local configuration file.
[ -f "/etc/sddm.conf" ] && \
    sudo cp /etc/sddm.conf /etc/sddm.conf.backup && \
    sudo sed -i 's/^Current=*.*/Current=/g' /etc/sddm.conf

# Create a local configuration file if it doesn't exist.
# Standard Arch Linux does not create this file by default.
[ ! -f "/etc/sddm.conf" ] && \
    sudo cp /usr/lib/sddm/sddm.conf.d/default.conf /etc/sddm.conf || echo "Default sddm system config file is not found."

# ArcoLinux B Awesome uses this config location.
[ -f "/etc/sddm.conf.d/kde_settings.conf" ] && \
    sudo cp /etc/sddm.conf.d/kde_settings.conf /etc/sddm.conf.d/kde_settings.backup && \
    sudo sed -i 's/^Current=*.*/Current=/g' /etc/sddm.conf.d/kde_settings.conf

printf "%s\n" "${bold}DTOS had been installed!${normal}"

while true; do
    read -p "Do you want to reboot to get your DTOS? [Y/n] " yn
    case $yn in
        [Yy]* ) reboot;;
        [Nn]* ) break;;
        "" ) reboot;;
        * ) echo "Please answer YES or NO.";;
    esac
done
